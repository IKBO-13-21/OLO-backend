syntax = "proto3";

package proto;

import "google/api/annotations.proto";

option go_package = "/olo_service/generated";

service OLO {
  rpc helloUser(helloUserRequest) returns (helloUserResponse) {
    option (google.api.http) = {
      get: "/api/olo/sayHello"
    };
  }

  rpc GetAllWidgets (GetWidgetsRequest) returns (GetWidgetsResponse) {
    option (google.api.http) = {
      get: "/api/olo/getAllWidgets"
    };
  }

  rpc GetUserWidgets (GetWidgetsRequest) returns (GetWidgetsResponse) {
    option (google.api.http) = {
      get: "/api/olo/getUserWidgets"
    };
  }

  rpc AddWidgetForUser (WidgetForUserRequest) returns (WidgetForUserResponse) {
    option (google.api.http).post = "/api/olo/addWidgetForUser";
    option (google.api.http).body = "*";
  }

  rpc DeleteWidgetForUser (WidgetForUserRequest) returns (WidgetForUserResponse) {
    option (google.api.http).post = "/api/olo/deleteWidgetForUser";
    option (google.api.http).body = "*";
  }

  rpc GetAllArticles (GetAllArticlesRequest) returns (GetAllArticlesResponse) {
    option (google.api.http) = {
      get: "/api/olo/articles"
    };
  }

  rpc GetUsersArticles (GetAllArticlesRequest) returns (GetAllArticlesResponse) {
    option (google.api.http) = {
      get: "/api/olo/getUserArticles"
    };
  }

  rpc AddArticleForUser (ArticleForUserRequest) returns (ArticleForUserResponse) {
    option (google.api.http).post = "/api/olo/addArticleForUser";
    option (google.api.http).body = "*";
  }

  rpc DeleteArticleForUser (ArticleForUserRequest) returns (ArticleForUserResponse) {
    option (google.api.http).post = "/api/olo/deleteArticleForUser";
    option (google.api.http).body = "*";
  }
}

message helloUserRequest {}

message helloUserResponse {
  string message = 1;
}

message Widget {
  uint64 id = 1;
  string description = 2;
  string data = 3;
}

message WidgetForUserRequest {
  int64 widgetId = 1;
}

message WidgetForUserResponse {
  string response = 1;
}

message GetWidgetsRequest {}

message GetWidgetsResponse {
  repeated Widget widgets = 1;
}

message Article {
  uint64 id = 1;
  string header = 2;
}

message GetAllArticlesRequest {}

message GetAllArticlesResponse {
  repeated Article articles = 1;
}

message ArticleForUserRequest {
  int64 articleId = 1;
}

message ArticleForUserResponse {
  string response = 1;
}